package restserver;

import java.io.Serializable;
import java.util.Collection;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import nl.fontys.sebivenlo.dao.DAOException;
import nl.fontys.sebivenlo.dao.Entity2;
import nl.fontys.sebivenlo.dao.pg.PGDAO;
import nl.fontys.sebivenlo.dao.pg.PGDAOFactory;

/**
 * Base class for all endpoints using the same data source.
 *
 * @author Pieter van den Hombergh {@code pieter.van.den.hombergh@gmail.com}
 */
abstract class DAOCrudService<K extends Serializable, E extends Entity2<K>> {

    /**
     * Injection point for the common data source for all services of Fantys
     * University.
     *
     * The lookup parameter value to the Resource annotation should be defined
     * in the web server and by injected by it.
     *
     * In Payara this implies that your have to define a JDBC pool and a jdbc
     * resource with the name used below.
     *
     * @param ds the data source to inject.
     */
    @Inject
    PGDAOFactory factory;

    abstract Class<? extends Entity2> getEntityType();

    /**
     * Get all entities of this resource as a json array.
     *
     * @return the json array with the entities, if any.
     */
    @GET
    @Produces( value = { MediaType.APPLICATION_JSON } )
    public Response getEntities() {
        PGDAO dao = factory.createDao( getEntityType() );
        Collection<E> all = dao.getAll();
        return Response.status( 200 ).entity( all ).build();
    }

    /**
     * Get one entity.
     *
     * Implementation detailed steps:
     * <ul>
     * <li>Declare method getEntityById that returns Response.</li>
     * <li>Annotate method as RESTful service.</li>
     * <li>Use the above defined query string "getByIdQuery".</li>
     * <li>Use the method getIdName() to obtain the primary key column name</li>
     * <li>If query is successful, return Response OK, otherwise return Response
     * status NOT_FOUND.</li>
     * <li>In case of an SQLException return a serverError Response.</li>
     * </ul>
     *
     * @param id of the entity as an integer.
     *
     * @return the entity as json or status 404 (Not Found).
     */
    @GET
    @Path( value = "{id}" )
    @Produces( value = { MediaType.APPLICATION_JSON } )
    public Response getEntityById(
            @PathParam( value = "id" ) Integer id ) {
        PGDAO dao = factory.createDao( getEntityType() );
        Optional<E> result = dao.get( id );

        if ( !result.isPresent() ) {
            return Response.status( 404 ).build();
        }
        return Response.status( 200 ).entity( result.get() ).build();
    }

    /**
     * Delete the entity via ID.
     *
     * @param id of the entity
     *
     * @return the removed entity.
     */
    @DELETE
    @Produces( value = { MediaType.APPLICATION_JSON } )
    @Path( "{id}" )
    public Response delete( @PathParam( "id" ) Integer id ) {
        PGDAO dao = factory.createDao( getEntityType() );
//        dao.delete( id);

        return Response.ok().build();
    }

    /**
     * Insert an new entity. The primary key is generated by the database.
     *
     * @param json data defining the new entity
     * @param uriInfo the uri context from the server
     *
     * @return the new entity, including the generated key and any other default
     * values it may have, such as creation datestamp.
     */
    @POST
    @Consumes( value = { MediaType.APPLICATION_JSON } )
    @Produces( value = { MediaType.APPLICATION_JSON } )
    public Response insertEntity( E e, @Context UriInfo uriInfo ) {
        PGDAO<K, E> dao = factory.createDao( getEntityType() );
        E result = null;
        try {
            result = dao.save( e );
        } catch ( DAOException ex ) {
            Logger.getLogger( DAOCrudService.class.getName() ).log(
                    Level.SEVERE, null, ex );
            return Response.notModified().build();
        }
        return Response.ok( result ).build();
    }

    /**
     * Update an entity.
     *
     * The json object is expected to be complete with updated values. The
     * primary key value is taken from the json object. If the record with that
     * primary key does not pre-exists in the database, a 404 will be returned.
     *
     * @param json to be processed
     *
     * @return the updated record.
     */
    @PUT
    @Consumes( value = { MediaType.APPLICATION_JSON } )
    @Produces( value = { MediaType.APPLICATION_JSON } )
    public Response updateEntity( E entity ) {
        PGDAO<K, E> dao = factory.createDao( getEntityType() );
        try {
            E result = dao.save( entity );
            return Response.ok( result ).build();
        } catch ( DAOException ex ) {
            Logger.getLogger( DAOCrudService.class.getName() ).log(
                    Level.SEVERE, null, ex );
            return Response.notModified().build();
        }

    }

}
